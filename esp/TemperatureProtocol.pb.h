/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.1 at Sun Apr 15 19:26:58 2018. */

#ifndef PB_TEMPERATUREPROTOCOL_PB_H_INCLUDED
#define PB_TEMPERATUREPROTOCOL_PB_H_INCLUDED
#include "pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _PacketType {
    PacketType_authRequest = 1,
    PacketType_authResponse = 2,
    PacketType_notifyRequest = 3,
    PacketType_notifyResponse = 4,
    PacketType_getActualConfig = 5,
    PacketType_actualConfig = 6,
    PacketType_setConfig = 7,
    PacketType_configChanges = 8
} PacketType;
#define _PacketType_MIN PacketType_authRequest
#define _PacketType_MAX PacketType_configChanges
#define _PacketType_ARRAYSIZE ((PacketType)(PacketType_configChanges+1))

/* Struct definitions */
typedef struct _ActualConfig {
    float target;
    float gisteris;
    float tuningSensor;
/* @@protoc_insertion_point(struct:ActualConfig) */
} ActualConfig;

typedef struct _AuthRequest {
    int32_t type;
    int32_t version;
    pb_callback_t apiKey;
/* @@protoc_insertion_point(struct:AuthRequest) */
} AuthRequest;

typedef struct _AuthResponse {
    int32_t state;
/* @@protoc_insertion_point(struct:AuthResponse) */
} AuthResponse;

typedef struct _ConfigChanges {
    bool has_target;
    float target;
    bool has_gisteris;
    float gisteris;
    bool has_tuningSensor;
    float tuningSensor;
/* @@protoc_insertion_point(struct:ConfigChanges) */
} ConfigChanges;

typedef struct _ConfigSet {
    bool has_target;
    float target;
    bool has_gisteris;
    float gisteris;
    bool has_tuningSensor;
    float tuningSensor;
/* @@protoc_insertion_point(struct:ConfigSet) */
} ConfigSet;

typedef struct _NotifyRequest {
    bool has_current;
    float current;
    bool has_heatingState;
    uint32_t heatingState;
    bool has_coolingState;
    uint32_t coolingState;
/* @@protoc_insertion_point(struct:NotifyRequest) */
} NotifyRequest;

typedef struct _BaseMessage {
    PacketType type;
    bool has_authRequest;
    AuthRequest authRequest;
    bool has_authResponse;
    AuthResponse authResponse;
    bool has_notifyRequest;
    NotifyRequest notifyRequest;
    bool has_configSet;
    ConfigSet configSet;
    bool has_configChanges;
    ConfigChanges configChanges;
    bool has_actualConfig;
    ActualConfig actualConfig;
/* @@protoc_insertion_point(struct:BaseMessage) */
} BaseMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define BaseMessage_init_default                 {_PacketType_MIN, false, AuthRequest_init_default, false, AuthResponse_init_default, false, NotifyRequest_init_default, false, ConfigSet_init_default, false, ConfigChanges_init_default, false, ActualConfig_init_default}
#define AuthRequest_init_default                 {0, 0, {{NULL}, NULL}}
#define AuthResponse_init_default                {0}
#define NotifyRequest_init_default               {false, 0, false, 0, false, 0}
#define ConfigSet_init_default                   {false, 0, false, 0, false, 0}
#define ActualConfig_init_default                {0, 0, 0}
#define ConfigChanges_init_default               {false, 0, false, 0, false, 0}
#define BaseMessage_init_zero                    {_PacketType_MIN, false, AuthRequest_init_zero, false, AuthResponse_init_zero, false, NotifyRequest_init_zero, false, ConfigSet_init_zero, false, ConfigChanges_init_zero, false, ActualConfig_init_zero}
#define AuthRequest_init_zero                    {0, 0, {{NULL}, NULL}}
#define AuthResponse_init_zero                   {0}
#define NotifyRequest_init_zero                  {false, 0, false, 0, false, 0}
#define ConfigSet_init_zero                      {false, 0, false, 0, false, 0}
#define ActualConfig_init_zero                   {0, 0, 0}
#define ConfigChanges_init_zero                  {false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ActualConfig_target_tag                  1
#define ActualConfig_gisteris_tag                2
#define ActualConfig_tuningSensor_tag            3
#define AuthRequest_type_tag                     1
#define AuthRequest_version_tag                  2
#define AuthRequest_apiKey_tag                   3
#define AuthResponse_state_tag                   1
#define ConfigChanges_target_tag                 1
#define ConfigChanges_gisteris_tag               2
#define ConfigChanges_tuningSensor_tag           3
#define ConfigSet_target_tag                     1
#define ConfigSet_gisteris_tag                   2
#define ConfigSet_tuningSensor_tag               3
#define NotifyRequest_current_tag                1
#define NotifyRequest_heatingState_tag           5
#define NotifyRequest_coolingState_tag           6
#define BaseMessage_type_tag                     1
#define BaseMessage_authRequest_tag              2
#define BaseMessage_authResponse_tag             3
#define BaseMessage_notifyRequest_tag            4
#define BaseMessage_configSet_tag                5
#define BaseMessage_configChanges_tag            6
#define BaseMessage_actualConfig_tag             7

/* Struct field encoding specification for nanopb */
extern const pb_field_t BaseMessage_fields[8];
extern const pb_field_t AuthRequest_fields[4];
extern const pb_field_t AuthResponse_fields[2];
extern const pb_field_t NotifyRequest_fields[4];
extern const pb_field_t ConfigSet_fields[4];
extern const pb_field_t ActualConfig_fields[4];
extern const pb_field_t ConfigChanges_fields[4];

/* Maximum encoded size of messages (where known) */
#define BaseMessage_size                         (91 + AuthRequest_size)
/* AuthRequest_size depends on runtime parameters */
#define AuthResponse_size                        11
#define NotifyRequest_size                       17
#define ConfigSet_size                           15
#define ActualConfig_size                        15
#define ConfigChanges_size                       15

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define TEMPERATUREPROTOCOL_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
